apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: job-{{ params.job_name }}-{{ ts_nodash | lower }}-{{ task_instance.try_number }}
  labels:
    warehouse_path: processing
    date: "{{ ds_nodash }}"
  namespace: processing
spec:
  arguments:
    - job_name={{ params.job_name }}
    - load_type={{ params.load_type }}
    - owner={{ params.owner }}
    - table={{ params.table }}
    - minio_bucket={{ params.minio_bucket }}
    - url_snowflake={{ params.url_snowflake }}
    - database_snowflake={{ params.database_snowflake }}
    - warehouse_snowflake={{ params.warehouse_snowflake }}
    - role_snowflake={{ params.role_snowflake }}
  deps:
    pyFiles:
      - local:///opt/spark/work-dir/spark_session.py
      - local:///opt/spark/work-dir/functions_global.py
      - local:///opt/spark/work-dir/sql_functions.py
    jars:
      - local:///opt/spark/work-dir/jar/spark-snowflake_2.13-2.13.0-spark_3.2.jar
      - local:///opt/spark/work-dir/jar/snowflake-jdbc-3.13.30.jar
      - https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.4/hadoop-aws-3.3.4.jar
      - https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.12.262/aws-java-sdk-bundle-1.12.262.jar

  hadoopConf:
    fs.s3a.endpoint: "http://minio.deepstorage.svc.cluster.local:9000"
    fs.s3a.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
    fs.s3a.path.style.access: "True"
    fs.s3a.connection.ssl.enabled: "false"
    fs.s3a.fast.upload: "true"
    fs.s3a.multipart.size: "104857600"
    fs.s3a.connection.maximum: "100"
    fs.s3a.aws.credentials.provider: "com.amazonaws.auth.EnvironmentVariableCredentialsProvider"
  sparkConf:
    spark.sql.extensions: "io.delta.sql.DeltaSparkSessionExtension"
    spark.sql.catalog.spark_catalog: "org.apache.spark.sql.delta.catalog.DeltaCatalog"

  type: Python
  mode: cluster
  image: "luanb7/spark-3.2.3-delta:1.75"
  imagePullPolicy: IfNotPresent
  mainApplicationFile: "{{ params.mainApplicationFile }}"
  sparkVersion: "3.2.3"
  terminationGracePeriodSecond: 60
  timeToLiveSeconds: 60
  restartPolicy:
    type: OnFailure
    onFailureRetries: 1
    onFailureRetryInterval: 10
    onSubmissionFailureRetries: 5
    onSubmissionFailureRetryInterval: 20
  driver:
    env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: minio-credentions
            key: access_key
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: minio-credentions
            key: secret_access_key
      - name: PASSWORD_SNOWFLAKE
        valueFrom:
          secretKeyRef:
            name: snowflake-credentions
            key: password
      - name: USER_SNOWFLAKE
        valueFrom:
          secretKeyRef:
            name: snowflake-credentions
            key: user
    cores: 1
    coreLimit: "1200m"
    memory: "512m"
    labels:
      version: 3.2.3
    serviceAccount: default
  executor:
    env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: minio-credentions
            key: access_key
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: minio-credentions
            key: secret_access_key
      - name: PASSWORD_SNOWFLAKE
        valueFrom:
          secretKeyRef:
            name: snowflake-credentions
            key: password
      - name: USER_SNOWFLAKE
        valueFrom:
          secretKeyRef:
            name: snowflake-credentions
            key: user
    cores: 1
    instances: 1
    labels:
      version: 3.2.3
    memory: "512m"
    serviceAccount: default
